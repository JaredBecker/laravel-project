https://www.youtube.com/watch?v=MYyJ4PuL4pY
Currently At: 1:10

=================
|   DATABASES   |
=================
- When creating tables you don't have to do it manually. You can do it by using php artisan make:migration table_name. This creates a migration file where you can define the table names
- To run your migration files you can run php artisan migrate. This will look at all migration files and create your tables for you.
- Seeders allow us to create dummy data. They do this by using factories which use a library called faker to generate random data for us for testing.
- To run seeders you type php artisan php:seed in the cmd
- To clear out data you can just run php artisan migration:refresh which clears out all your tables
- If you want to clear data and reseed it you can run php artisan migration:refresh --seed
- You can create custom factories with php artisan make:factory SomeNameFactory


==============
|   ROUTES   |
==============
- The Route class supports all HTTP verbs
- When creating routes for your website you would use web.php and for api's you use api.php
- Routes can return a response, plain text or a view which specifies which template to load when accessing it
- When using view you can also return data that can be accessed within the template you are loading
- We can add validation to routes by using the where method to check request params for example if you expect an id to be a number you can check this with a regex

===================
|   CONTROLLERS   |
===================
- Naming conventions when it comes to controller function names
    index - Get all resources
    show - Show single resource
    create - Show form to create new resource
    store - Store new resource
    edit - Show form to edit resource
    update - Update resource
    destroy - Delete resource
- To use pagination you can replace get() with paginate(num)
- This uses tailwind by default but you can change this by running php artisan vendor:publish and find the pagination option.
- To make sure that theme gets uses you need to add it in AppServiceProvider.php boot method with Model::pagination_type_to_use

=================
|   TEMPLATES   |
=================
- @yield('some_name') allows us to specify a location within a template where we should load dynamic content. This allows us to keep things like headers, footers and menus constant without having to define it in each view.
- In the files that will be components of a page we use @extends('template_name') and then wrap all the content with @section('name_inside_@yield')
- You can break templates into smaller reusable components. You then use them by saying <x-component-name />
- You can also pass in props to a component by adding an attribute with a string or number value or a :attribute="$some_var" to pass in variables
- You can use the $attributes prop to target attributes put onto the component tag ie <x-comp-tag class="test" />
- Use $slot to output content inside of a component tag within the component
